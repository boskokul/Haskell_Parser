Sequence [
    TypeDeclaration b RegularType "Integer",
    AssignNew VarLI "b"  (ArithmeticBinaryExpr Plus (Neg (LiteralExpr (IntConstLI 6))) (LiteralExpr (IntConstLI 1))) NoWhere,
    AssignNew VarLI "c"  (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) Sequence [
                AssignNew VarLI "a"  (LiteralExpr (IntConstLI 3)) NoWhere,
                AssignNew VarLI "b"  (LiteralExpr (IntConstLI 5)) NoWhere
            ],
    TypeDeclaration f1 FunctionType [ListType "Integer",RegularType "Bool",RegularType "String"],
    FunctionDeclaration f1 ["b","c"] (  (ArithmeticBinaryExpr Times (VarExpr (VarLI "b")) (VarExpr (VarLI "c"))) NoWhere),
    TypeDeclaration p ListType "Bool",
    AssignNew VarLI "p"  (FunctionCallNew "f1" [IntConstLI 2,IntConstLI 3]) NoWhere,
    FunctionDeclaration add ["a","b"] (  (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) NoWhere),
    FunctionDeclaration inc ["a"] (  (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (LiteralExpr (IntConstLI 1))) NoWhere),
    FunctionDeclaration incAlt ["a"] (  (FunctionCallNew "add" [VarLI "a",IntConstLI 1]) NoWhere),
    AssignNew VarLI "s1"  (List [FloatConstLI 1.4,FloatConstLI 5.6]) NoWhere,
    AssignNew VarLI "s2"  (List [IntConstLI 2,IntConstLI 3]) NoWhere,
    AssignNew VarLI "s3"  (List [VarLI "r1",VarLI "r2"]) NoWhere,
    AssignNew VarLI "s4"  (List [BoolConstLI True,BoolConstLI False]) NoWhere,
    FunctionDeclaration m2 ["b"] (        If (LogicalBinary And (LogicalVar (BoolConstLI True)) (LogicalVar (BoolConstLI False))) 
             ( EExpr (ArithmeticBinaryExpr Plus (VarExpr (VarLI "b")) (LiteralExpr (IntConstLI 3))) )  
             ( EExpr (ArithmeticBinaryExpr Plus (VarExpr (VarLI "b")) (LiteralExpr (IntConstLI 4))) ) ),
    FunctionDeclaration numToString ["x"] (        CaseOf (VarExpr (VarLI "x")) [
            Branch IntConstLI 1 (String "jedan"),
            Branch IntConstLI 2 (String "dva")
        ]),
    FunctionDeclaration maxOfTwo ["a","b"] (        If (RelationalBinary GreaterEqual (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) 
             ( EExpr (VarExpr (VarLI "a")) )  
             ( EExpr (VarExpr (VarLI "b")) ) ),
    TypeDeclaration numberNegative FunctionType [RegularType "Integer",RegularType "Bool"],
    FunctionDeclaration numberNegative ["n"] (        If (RelationalBinary Less (VarExpr (VarLI "n")) (LiteralExpr (IntConstLI 0))) 
             ( EExpr (LiteralExpr (BoolConstLI True)) )  
             ( EExpr (LiteralExpr (BoolConstLI False)) ) ),
    TypeDeclaration cubePerimeter FunctionType [RegularType "Integer",RegularType "Integer"],
    FunctionDeclaration cubePerimeter ["edgeLength"] (        LetIn             AssignNew VarLI "numberOfEdges"  (LiteralExpr (IntConstLI 4)) NoWhere              
             ( EExpr (ArithmeticBinaryExpr Times (VarExpr (VarLI "edgeLength")) (VarExpr (VarLI "numberOfEdges"))) ) )
]