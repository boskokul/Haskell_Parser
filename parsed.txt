Sequence [
    TypeDeclaration b RegularType "Integer",
    AssignNew VarLI "b" (Neg (LiteralExpr (FloatConstLI 4.4))) NoWhere,
    AssignNew VarLI "c" (LiteralExpr (IntConstLI 4)) Sequence [
            AssignNew VarLI "a" (LiteralExpr (IntConstLI 3)) NoWhere,
            AssignNew VarLI "b" (LiteralExpr (IntConstLI 5)) NoWhere
        ],
    AssignNew VarLI "a" (ArithmeticBinaryExpr Plus (Neg (LiteralExpr (IntConstLI 6))) (LiteralExpr (IntConstLI 1))) NoWhere,
    TypeDeclaration p ListType "Bool",
    AssignNew VarLI "p" (FunctionCallNew "f" [VarLI "b",VarLI "x"]) NoWhere,
    TypeDeclaration f1 FunctionType [ListType "Integer",RegularType "Bool",RegularType "String"],
    AssignNew VarLI "f1" (ArithmeticBinaryExpr Plus (LiteralExpr (IntConstLI 2)) (ArithmeticBinaryExpr Times (VarExpr (VarLI "b")) (VarExpr (VarLI "c")))) NoWhere,
    CaseOf (VarExpr (VarLI "x")) [
        Branch w (String "gft"),
        Branch c (String "abc")
    ],
    AssignNew VarLI "a" (FunctionCallNew "f1" [VarLI "b",IntConstLI 3,IntConstLI 3]) NoWhere,
    FunctionDeclaration inc ["a"] (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (LiteralExpr (IntConstLI 1))),
    LetIn Sequence [
            AssignNew VarLI "a" (LiteralExpr (IntConstLI 5)) NoWhere,
            AssignNew VarLI "i" (LiteralExpr (IntConstLI 4)) NoWhere
        ] Sequence [
            AssignNew VarLI "a" (LiteralExpr (IntConstLI 3)) NoWhere,
            AssignNew VarLI "b" (LiteralExpr (IntConstLI 3)) NoWhere
        ],
    If (Not (LogicalBinary Or (RelationalBinary Greater (VarExpr (VarLI "a")) (LiteralExpr (IntConstLI 5))) (RelationalBinary Less (VarExpr (VarLI "a")) (LiteralExpr (IntConstLI 2)))))         AssignNew VarLI "b" (LiteralExpr (IntConstLI 3)) NoWhere         AssignNew VarLI "b" (LiteralExpr (IntConstLI 4)) NoWhere,
    If (LogicalBinary And (RelationalBinary LessEqual (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) (RelationalBinary NotEqual (VarExpr (VarLI "b")) (VarExpr (VarLI "a"))))         AssignNew VarLI "a" (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) NoWhere         AssignNew VarLI "a" (ArithmeticBinaryExpr Minus (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))) NoWhere,
    If (LogicalBinary And (LogicalVar (BoolConstLI True)) (LogicalVar (BoolConstLI False))) Sequence [
            AssignNew VarLI "b" (LiteralExpr (IntConstLI 3)) NoWhere,
            AssignNew VarLI "c" (LiteralExpr (IntConstLI 0)) NoWhere
        ]         AssignNew VarLI "b" (LiteralExpr (IntConstLI 4)) NoWhere,
    FunctionDeclaration add ["a","b"] (ArithmeticBinaryExpr Plus (VarExpr (VarLI "a")) (VarExpr (VarLI "b"))),
    AssignNew VarLI "s" (List [IntConstLI 2,IntConstLI 3]) NoWhere,
    AssignNew VarLI "s" (List [VarLI "r1",VarLI "r2"]) NoWhere,
    AssignNew VarLI "s" (List [BoolConstLI True,BoolConstLI False]) NoWhere,
    AssignNew VarLI "s" (List [FloatConstLI 1.4,FloatConstLI 5.6]) NoWhere,
    CaseOf (VarExpr (VarLI "x")) [
        Branch w (VarLI "t"),
        Branch c (VarLI "r")
    ],
    CaseOf (VarExpr (VarLI "x")) [
        Branch w (IntConstLI 12),
        Branch c (IntConstLI 10)
    ]
]